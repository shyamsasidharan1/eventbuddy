name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  GCP_REGISTRY: us-central1-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPOSITORY: eventbuddy-repo
  IMAGE_NAME: eventbuddy

jobs:
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Setup database extensions
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d test -c "CREATE EXTENSION IF NOT EXISTS citext;"
      env:
        PGPASSWORD: postgres

    - name: Setup database schema
      run: npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

    - name: Run linting
      run: npm run lint

    - name: Run tests with coverage
      run: npm run test:ci
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker to use gcloud as credential helper for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GCP_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        # Debug: Show all available tags
        echo "All tags from metadata:"
        echo "${{ steps.meta.outputs.tags }}"
        
        # Use the first tag from the metadata action
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Selected image tag: $IMAGE_TAG"
        echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.GCP_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '0'
      continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Install GKE auth plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Get GKE credentials  
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Run database migrations
      run: |
        # Debug: Show received image reference
        echo "Received image from build job: ${{ needs.build.outputs.image }}"
        
        # Set image with fallback to develop tag
        if [ -z "${{ needs.build.outputs.image }}" ]; then
          MIGRATION_IMAGE="${{ env.GCP_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:develop"
          echo "Using fallback image: $MIGRATION_IMAGE"
        else
          MIGRATION_IMAGE="${{ needs.build.outputs.image }}"
          echo "Using build job image: $MIGRATION_IMAGE"
        fi
        
        # Create a temporary job for migrations with unique timestamp
        MIGRATION_JOB_NAME="eventbuddy-migration-$(date +%s)"
        cat <<EOF > k8s/migration-job.yaml
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: $MIGRATION_JOB_NAME
          namespace: eventbuddy-staging
        spec:
          template:
            spec:
              restartPolicy: Never
              containers:
              - name: migrate
                image: $MIGRATION_IMAGE
                command: ["npx", "prisma", "db", "push"]
                envFrom:
                - configMapRef:
                    name: eventbuddy-staging-config
                env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: eventbuddy-staging-secrets
                      key: database-url
        EOF
        kubectl apply -f k8s/migration-job.yaml
        kubectl wait --for=condition=complete job/$MIGRATION_JOB_NAME --timeout=300s -n eventbuddy-staging

    - name: Deploy to staging
      run: |
        # Use the same image selection logic  
        if [ -z "${{ needs.build.outputs.image }}" ]; then
          DEPLOY_IMAGE="${{ env.GCP_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:develop"
          echo "Using fallback deployment image: $DEPLOY_IMAGE"
        else
          DEPLOY_IMAGE="${{ needs.build.outputs.image }}"
          echo "Using build job deployment image: $DEPLOY_IMAGE"
        fi
        
        echo "Deploying image: $DEPLOY_IMAGE"
        
        # Create namespace
        kubectl create namespace eventbuddy-staging --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy databases first
        kubectl apply -f k8s/postgres-staging.yaml
        kubectl apply -f k8s/redis-staging.yaml
        
        # Wait for databases to be ready
        kubectl wait --for=condition=available deployment/postgres-staging -n eventbuddy-staging --timeout=300s
        kubectl wait --for=condition=available deployment/redis-staging -n eventbuddy-staging --timeout=300s
        
        # Create a temporary deployment file with the correct image
        cp k8s/deployment-staging.yaml k8s/deployment-staging-temp.yaml
        sed -i "s|us-central1-docker.pkg.dev/hypnotic-surfer-468513-a0/eventbuddy-repo/eventbuddy:develop|$DEPLOY_IMAGE|g" k8s/deployment-staging-temp.yaml
        
        # Deploy API
        kubectl apply -f k8s/configmap-staging.yaml
        kubectl apply -f k8s/deployment-staging-temp.yaml
        kubectl apply -f k8s/service-staging.yaml
        kubectl rollout status deployment/eventbuddy-api-staging -n eventbuddy-staging

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Install GKE auth plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Run production database migrations
      run: |
        PROD_IMAGE="${{ env.GCP_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
        MIGRATION_JOB_NAME="eventbuddy-migration-$(date +%s)"
        # Create a temporary job for production migrations
        cat <<EOF > k8s/migration-job.yaml
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: $MIGRATION_JOB_NAME
          namespace: eventbuddy
        spec:
          template:
            spec:
              restartPolicy: Never
              containers:
              - name: migrate
                image: $PROD_IMAGE
                command: ["npx", "prisma", "migrate", "deploy"]
                envFrom:
                - configMapRef:
                    name: eventbuddy-config
                env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: eventbuddy-secrets
                      key: database-url
        EOF
        kubectl apply -f k8s/migration-job.yaml
        kubectl wait --for=condition=complete job/$MIGRATION_JOB_NAME --timeout=300s -n eventbuddy

    - name: Deploy to production
      run: |
        # For main branch, use latest tag
        PROD_IMAGE="${{ env.GCP_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Deploying production image: $PROD_IMAGE"
        
        # Create a temporary deployment file with the correct image
        cp k8s/deployment.yaml k8s/deployment-temp.yaml
        sed -i "s|us-central1-docker.pkg.dev/hypnotic-surfer-468513-a0/eventbuddy-repo/eventbuddy:latest|$PROD_IMAGE|g" k8s/deployment-temp.yaml
        
        # Show what we're deploying
        echo "Image in deployment file:"
        grep "image:" k8s/deployment-temp.yaml
        
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment-temp.yaml
        kubectl apply -f k8s/service.yaml
        kubectl rollout status deployment/eventbuddy-api -n eventbuddy